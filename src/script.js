import TelegramBot from 'node-telegram-bot-api'
import config from 'config'
import { connection } from './db/connection.mjs'
import { Request } from './db/replenishmentModel.mjs'

const bot = new TelegramBot(config.get('TELEGRAM_TOKEN'), { polling: true })

connection
  .then(() => {
    console.log('Database connection successful')
  })
  .catch((err) => {
    console.log(`Server not running. Error message: ${err.message}`)
    process.exit(1)
  })

bot.on('message', async (msg) => {
  const { text, from, chat } = msg
  const regexPattern = new RegExp(chat.id + '$', 'i');
  const request = await Request.findOne({ state: { $regex: regexPattern } })

  // if (chat.id === 1228886912) {
  //   const userReplenishments = await Replenishment.aggregate([
  //     {
  //       $group: {
  //         _id: '$worker',
  //         replenishmentsCount: { $sum: 1 },
  //         summ: { $sum: '$amount' }
  //       }
  //     }
  //   ]).sort({ summ: -1 })

  // }


  if (request) {
    if (request.state.startsWith('from')) {
      await Request.findOneAndUpdate({ _id: request._id }, { state: `experience-${chat.id}`, from: text })

      return bot.sendMessage(chat.id, `2Ô∏è‚É£ –û—Ç–ª–∏—á–Ω–æ, –∞ –±—ã–ª –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç –≤ —Å–∫–∞–º–µ? –ï—Å–ª–∏ –¥–∞ —Ç–æ –ø–æ –∫–∞–∫–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º?`, {
        reply_markup: {
          remove_keyboard: true
        }
      })

    }

    if (request.state.startsWith('experience')) {
      await Request.findOneAndUpdate({ _id: request._id }, { state: `time-${chat.id}`, experience: text })

      return bot.sendMessage(chat.id, `3Ô∏è‚É£ –ê —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—ã –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ?`)
    }

    if (request.state.startsWith('time')) {
      await Request.findOneAndUpdate({ _id: request._id }, { state: `goals-${chat.id}`, time: text })

      return bot.sendMessage(chat.id, `4Ô∏è‚É£ –ò –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–∫, –∫–∞–∫–∏–µ —Ü–µ–ª–∏ —Ç—ã –ø—Ä–µ—Å–ª–µ–¥—É–µ—à—å, –Ω–∞ —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?`)
    }

    if (request.state.startsWith('goals')) {

      const req = await Request.findOneAndUpdate({ _id: request._id }, { state: `waiting-${chat.id}`, goals: text })

      bot.sendMessage(6575814393, `–ó–∞—è–≤–∫–∞ –æ—Ç @${from.username}:\n–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ: ${req.from}\n–û–ø—ã—Ç –≤ —Å–∫–∞–º–µ: ${req.experience}\n–í—Ä–µ–º—è: ${req.time}\n–¶–µ–ª–∏: ${text}`, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
                callback_data: `accept-${chat.id}`,
              },
              {
                text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                callback_data: `decline-${chat.id}`,
              }
            ]
          ]
        }

      })
      bot.sendMessage(1228886912, `–ó–∞—è–≤–∫–∞ –æ—Ç @${from.username}:\n–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ: ${req.from}\n–û–ø—ã—Ç –≤ —Å–∫–∞–º–µ: ${req.experience}\n–í—Ä–µ–º—è: ${req.time}\n–¶–µ–ª–∏: ${text}`)

      return bot.sendMessage(chat.id, `‚è≥ –û—Ç–ª–∏—á–Ω–æ, —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¢–°–∞–º –ø—Ä–æ–µ–∫—Ç–∞

–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Ö —Ä–µ—à–µ–Ω–∏—è, –æ–±—ã—á–Ω–æ –º—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç`)

    }

    if (request.state.startsWith('waiting')) {

      return bot.sendMessage(chat.id, `‚è≥ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¢–°–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ`)
    }
  }

  if (text === '‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω') {
    if (!chat.username) {
      return bot.sendMessage(chat.id, `–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞–≤–∫–∏, —É–∫–∞–∂–∏ —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –≤ Telegram: @username`)
    }

    await Request.create({
      state: `from-${chat.id}`,
    })

    return bot.sendMessage(chat.id, `1Ô∏è‚É£ –ü–µ—Ä–≤—ã–º —É–∫–∞–∂–∏ –æ—Ç–∫—É–¥–∞ —Ç—ã —É–∑–Ω–∞–ª –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ?`, {
      reply_markup: {
        keyboard: [
          [
            {
              text: '–†–µ–∫–ª–∞–º–∞',
            },
            {
              text: '–î—Ä—É–≥–∏–µ –≤–æ—Ä–∫–µ—Ä—ã',
            }
          ]
        ]
      },
    })
  }

  if (text.startsWith('/start')) {
    return requestMenu(chat.id)
  }

  return requestMenu(chat.id)
})

bot.on('callback_query', async (query) => {
  const { data, message } = query
  const { chat } = message

  if (data.startsWith('accept')) {
    const id = data.split('-')[1]
    const regexPattern = new RegExp(id + '$', 'i');
    await Request.findOneAndDelete({ state: { $regex: regexPattern } })
    bot.deleteMessage(chat.id, query.message.message_id)

    return bot.sendMessage(id, `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –¢–°–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞\n–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: https://t.me/+SMB7mi1CoCFlZjc6`)
  }

  if (data.startsWith('decline')) {
    const id = data.split('-')[1]
    const regexPattern = new RegExp(id + '$', 'i');
    await Request.findOneAndDelete({ state: { $regex: regexPattern } })
    bot.deleteMessage(chat.id, query.message.message_id)
    return bot.sendMessage(id, `‚ùå –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¢–°–æ–º, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–¥–∞—Ç—å –µ–µ –µ—â–µ —Ä–∞–∑`, {
      reply_markup: {
        keyboard: [
          [
            {
              text: '‚ûï –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É',
            }
          ]
        ],
      }
    })
  }
})




function requestMenu(chatId) {

  bot.sendMessage(chatId, `üëã –ü—Ä–∏–≤–µ—Ç, –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–∏ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –∏ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞:

‚Äî –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ª—é–±–∞—è —Ä–µ–∫–ª–∞–º–∞, —Ñ–ª—É–¥, —Å–ø–∞–º, –∫–æ–º–º–µ—Ä—Ü–∏—è, –ø—Ä–æ–¥–∞–∂–∞ —É—Å–ª—É–≥ –≤ —á–∞—Ç–µ –≤–æ—Ä–∫–µ—Ä–æ–≤
‚Äî –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –≤–æ—Ä–∫–µ—Ä–æ–≤, —Ä–∞–∑–≤–æ–¥–∏—Ç—å —Å—Ä–∞—á, –≤–µ—Å—Ç–∏ —Å–µ–±—è –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ
‚Äî –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ –≤ –ª—é–±–æ–º –µ–≥–æ –≤–∏–¥–µ
‚Äî –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∞–º–æ–Ω—Ç–∞–º —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
‚Äî –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
‚Äî –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∞–º–æ–Ω—Ç–∞–º —Å–≤–æ–∏ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏
‚Äî –ó–∞–ø—Ä–µ—â–µ–Ω —Å–∫–∞–º –∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ —Å–∫–∞–º–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤ –ª—é–±–æ–º –µ–≥–æ –≤–∏–¥–µ
‚Äî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã
‚Äî –¢–°—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–æ—à–µ–ª—å–∫–æ–≤
‚Äî –¢–°—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã–ø–ª–∞—Ç —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
‚Äî –¢–°—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –≤–æ—Ä–∫–µ—Ä–∞ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω

‚úÖ –ï—Å–ª–∏ —Ç—ã —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`, {
    reply_markup: {
      keyboard: [
        [
          {
            text: '‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω',
            callback_data: 'accept',
          }
        ]
      ]
    },
  })
}
